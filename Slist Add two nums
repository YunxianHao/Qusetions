//Question:Give you two non empty linked lists to represent two non negative integers. Each number is stored in reverse order, and each node can only store one digit.
//Please add the two numbers and return a linked list representing sum in the same form.
//You can assume that neither number starts with 0 except the number 0.

//Example:
//Input: L1 = [2,4,3], L2 = [5,6,4]
//Output: [7,0,8]
//Explanation: 342 + 465 = 807

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
struct ListNode* tail,*head;
head =NULL,tail = NULL;
int carry = 0;
while(l1 || l2)
{
    int n1 = l1?l1->val:0;
    int n2 = l2?l2->val:0;
    int sum = n1 + n2 + carry;
    if(!head)
    {
        head = tail = (struct ListNode*)malloc(sizeof(struct ListNode));
        tail->val = sum % 10;
        tail->next = NULL;
    }
    else
    {
        tail->next = malloc(sizeof(struct ListNode));
        tail->next->val = sum % 10; 
        tail = tail->next;
        tail->next = NULL;
    }
    carry = sum / 10;
    if(l1)
    {
        l1 = l1->next;
    }
    if(l2)
    {
        l2 = l2->next;
    }
}
if(carry > 0)
{
        tail->next = malloc(sizeof(struct ListNode));
        tail->next->val = carry;
        tail->next->next =NULL;
}
return head;
}
